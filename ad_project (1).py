# -*- coding: utf-8 -*-
"""AD project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l7MjY7wFySJwyY_3miU199B0N6ol7gY5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
from statsmodels.graphics.regressionplots import influence_plot

from google.colab import files
uploaded = files.upload()

import os
print(os.listdir("/content"))

import pandas as pd

file_path = "/content/Amazon Beauty Recommendation system.csv"  # Use the exact file name
df = pd.read_csv(file_path)

# Check if the file loaded correctly
print(df.head())
print(df.info())

df.info()

df.head()

df.describe()

df.size

unique_users = df["UserId"].nunique()
unique_products = df["ProductId"].nunique()

print(f"Unique Users: {unique_users}")
print(f"Unique Products: {unique_products}")

user_counts = df["UserId"].value_counts()
product_counts = df["ProductId"].value_counts()

print("Top Repeated Users:\n", user_counts.head())
print("Top Repeated Products:\n", product_counts.head())

import pandas as pd
from scipy.sparse import csr_matrix

# Load dataset
df = pd.read_csv('Amazon Beauty Recommendation system.csv')

# Convert categorical IDs to numerical indices (helps with memory efficiency)
user_map = {user: idx for idx, user in enumerate(df['UserId'].unique())}
product_map = {product: idx for idx, product in enumerate(df['ProductId'].unique())}

df['UserId'] = df['UserId'].map(user_map)
df['ProductId'] = df['ProductId'].map(product_map)

# Create sparse pivot table
sparse_pivot = csr_matrix(
    (df['Rating'], (df['UserId'], df['ProductId']))
)

print("Sparse matrix shape:", sparse_pivot.shape)

import pandas as pd

# Load the dataset
file_path = "/content/Amazon Beauty Recommendation system.csv"  # Adjust if renamed
df = pd.read_csv(file_path)

# Reduce dataset size by filtering popular products and active users
popular_products = df['ProductId'].value_counts().nlargest(5000).index  # Top 5000 products
active_users = df['UserId'].value_counts().nlargest(5000).index  # Top 5000 users

df_filtered = df[df['ProductId'].isin(popular_products) & df['UserId'].isin(active_users)]

# Generate pivot table
pivot_table = df_filtered.pivot_table(index='UserId', columns='ProductId', values='Rating', aggfunc='mean', fill_value=0)

# Display pivot table sample
print(pivot_table.head())

from sklearn.metrics.pairwise import cosine_similarity

# Compute User-User Similarity Matrix
user_similarity = cosine_similarity(pivot_table)

# Convert to DataFrame for readability
user_similarity_df = pd.DataFrame(user_similarity, index=pivot_table.index, columns=pivot_table.index)

# Display sample similarity matrix
print(user_similarity_df.head())

# Compute Item-Item Similarity Matrix
item_similarity = cosine_similarity(pivot_table.T)

# Convert to DataFrame for readability
item_similarity_df = pd.DataFrame(item_similarity, index=pivot_table.columns, columns=pivot_table.columns)

# Display sample item similarity matrix
print(item_similarity_df.head())

def get_similar_users(user_id, top_n=5):
    return user_similarity_df[user_id].sort_values(ascending=False).iloc[1:top_n+1]

# Example: Find top 5 similar users to a given user
user_id = pivot_table.index[0]  # Replace with an actual user ID if needed
print(f"Top similar users for User {user_id}:\n", get_similar_users(user_id))

def get_similar_items(product_id, top_n=5):
    return item_similarity_df[product_id].sort_values(ascending=False).iloc[1:top_n+1]

# Example: Find top 5 similar products to a given product
product_id = pivot_table.columns[0]  # Replace with an actual product ID if needed
print(f"Top similar items for Product {product_id}:\n", get_similar_items(product_id))

def recommend_products_for_user(user_id, top_n=5):
    similar_users = get_similar_users(user_id, top_n)
    user_ratings = pivot_table.loc[similar_users.index].mean()
    return user_ratings.sort_values(ascending=False).head(top_n)

# Example: Get recommended products for a user
print(f"Recommended products for User {user_id}:\n", recommend_products_for_user(user_id))

def recommend_similar_items(product_id, top_n=5):
    return get_similar_items(product_id, top_n)

# Example: Get recommended similar items for a product
print(f"Recommended similar items for Product {product_id}:\n", recommend_similar_items(product_id))

pip install matplotlib